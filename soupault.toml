### Configuration file for the soupault website generator ###

## Global settings

[settings]
  # Show build progress
  verbose = true

  # Show detailed debug information
  debug = false

  # Fail on page processing errors
  strict = true

  # Where generated files go
  build_dir = "build/"

  # Where page files are stored
  site_dir = "site/"

  # Where in the template the page content is inserted
  default_content_selector = "main"

  default_template_file = "templates/main.html"

  # Page considered the section index
  index_page = "index"

  page_file_extensions = ["html", "md"]

  doctype = "<!DOCTYPE html>"

  # Automatically load Lua plugins from plugins/
  # E.g. plugins/reading-time.lua is automatically loaded as "reading-time" widget.
  plugin_discovery = true
  plugin_dirs = ["plugins"]

[preprocessors]
  md = 'pandoc -f commonmark+smart -t html'

## Autogenerated section index settings
[index]
  index = true

  section = "blog/"

  sort_descending = true

  extract_after_widgets = ['insert-reading-time', 'make-post-header']

  sort_by = "date"

  leaf_file = ".leaf"

  dump_json = "index.json"

[index.fields]
  title = { selector = ["#post-title", "h1"] }
  excerpt = { selector = ["#post-excerpt", "p"] }
  date = { selector = ["#post-date", "time"] }
  tags = { selector = ".post-tag", select_all = true }

  reading_time = { selector = "#reading-time" }

[index.views.blog-index]
  # Insert generated index into an element that matches "#blog-index" selector.
  index_selector = "#blog-entries"
  #action = "prepend_child"

  section = "blog"

  # Jingoo template for a single item
  # There's also an index_template option if you want to loop through the items yourself,
  # and index_processor for those who want to use an external script
  # (index data JSON written to its stdin)
  index_template = """
    {% for e in entries %}
    <h2><a href="{{e.url}}">{{e.title}}</a></h2>
    <p><strong>Last update:</strong> {{e.date}}.</p>
    <p><strong>Reading time:</strong> {{e.reading_time}}.</p>
    <p>{{e.excerpt}}</p>
    <a href="{{e.url}}">Read more</a>
    {% endfor %}
  """

  #file = "hooks/blog-index.lua"

# This view displays the first ten entries on the main page
[index.views.blog-summary]
  index_selector = "#latest-blog-entries"

  section = "blog"

  index_template = """
    <dl>
      {% for e in sublist(0, 10, entries) %}
      <dt>{{e.date}}</dt>
      <dd> <a href="{{e.url}}">{{e.title}}</a> </dd>
      {% endfor %}
      </ul>
    </dl>
  """

## Widgets

# Takes the content of the first #page-title element or <h1> and inserts it into the <title>
# default is used if page has no elements matching those selectors.
[widgets.set-page-title]
  widget = "title"

  selector = ["#page-title", "h1"]
  default = "Sample site"
  append = " &mdash; Sample site"

# Inserts the contents of templates/header.html right before the <main> element
# There's a variety of actions, including prepend_child and replace_content
[widgets.insert-header]
  widget = "include"

  selector = "main"
  action = "insert_before"
  file = "templates/header.html"

# This widget comes from plugins/section-link-highlight.lua
# It highlights the "active" link in the navigation menu,
# that is, the link that matches the current page URL
[widgets.highlight-active-link]
  widget = "section-link-highlight"

  # Must run only after the header with a navigation menu is inserted
  after = ["insert-header"]

  selector = "nav"
  active_link_class = "nav-active"

# Inserts the contents of templates/footer.html at the end of the <body>
[widgets.insert-footer]
  widget = "include"
  selector = "body"
  action = "append_child"
  file = "templates/footer.html"

[widgets.make-post-header]
  widget = "post-header"
  section = "blog/"

  content_container_selector = "main"

  post_header_template = '''
    <div id="post-header">
      <h1 id="post-title">{{title}}</h1>
      <time id="post-date" datetime="{{date}}">{{date}}</time>
      {% if tags %}
        <div class="post-tag">
         <span>Tags: </span>
         {%- for t in tags -%}
           <span class="post-tag">{{t}}</span>{% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
    </div>
'''

# Why require adding a target element for the reading-time plugin by hand?
# We'll insert it automatically
[widgets.insert-reading-time-container]
  widget = "insert_html"

  after = "make-post-header"

  # Reading time container should only be in blog/*
  section = "blog/"

  # ...but not in blog/index.html
  exclude_path_regex = "(.*)/index(.*)"

  # Insert the reading time container right after the post title in <h1>
  action = "append_child"
  selector = "#post-header"

  html = '<div>Estimated reading time: <span id="reading-time"></span>.</div>'

# This widget comes from plugins/reading-time.lua
# It calculates estimated reading time based on word count
[widgets.insert-reading-time]
  widget = "reading-time"

  # If this widget runs before "insert-reading-time-container",
  # there will be nowhere to insert the reading time.
  # This is why we explicitly schedule it to run after that widget.
  after = "insert-reading-time-container"

  selector = "#reading-time"

  # The element where it looks for page "content"
  content_selector = "main"

# Inserts a table of contents generated from page headings
[widgets.table-of-contents]
  #exclude_path_regex = '/index(.*)'

  widget = "toc"
  selector = "#generated-toc"

  min_level = 2

  toc_list_class = "toc"
  toc_class_levels = false

  valid_html = true

  numbered_list = true

  heading_links = true
  heading_link_text = "â†’ "
  heading_link_class = "here"

  use_heading_slug = true

[widgets.insert-footnotes-container]
  widget = "insert-if"

  selector = "main"
  check_selector = "fn"
  html = '<div id="footnotes"> </div>'

[widgets.footnotes]
  widget = "footnotes"

  after = "insert-footnotes-container"

  selector = "div#footnotes"
  footnote_selector = ["fn"]
  footnote_link_class = "footnote"
  back_links = true
  link_id_prepend = "footnote-"
  back_link_id_append = "-ref"
